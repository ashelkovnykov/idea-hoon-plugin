/**
 * Documentation for generating this file:
 *   _ https://github.com/JetBrains/Grammar-Kit
 *   _ https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md
 *
 * Example files for inspiration:
 *   _ https://github.com/Teinnsei/brainfuck-idea-plugin/blob/master/src/main/scala/Brainfuck.bnf
 *   _ https://github.com/JetBrains/intellij-sdk-code-samples/blob/main/simple_language_plugin/src/main/java/org/intellij/sdk/language/Simple.bnf
 *   _ https://github.com/JetBrains/Grammar-Kit/blob/master/grammars/Grammar.bnf
 *
 * Known issues:
 *   - Tokenization errors for irregular tisgal (=<) (e.g. 'result:~(arm core arg)' interpreted as poorly-formed colsig
 *     expression instead of '=<  result  %~  arm  core  arg')
 *   - Tokenization errors for irregular colhep (:-) (e.g. '-^+' interpreted as poorly-formed ketlus expression instead
 *     of ':-  -  +')
 *   - Errors for siggal/siggar (~</~>) when:
 *     - input p has form [p=term q=hoon] AND
 *     - using form %foo.hoon AND
 *     - hoon expression begins with a number
 *   - Errors for molds when:
 *     - Using Hoon 151 syntax to generate molds (e.g. $~)
 *     - Using the irregular form of ketcol (^:(a) -> ,a) on wing expressions
 *   - Errors for SAIL when:
 *     - Using generic text in tall SAIL form
 */
{
  parserClass="com.ashelkov.hoon.plugin.parser.HoonParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Hoon"
  psiImplClassSuffix="Impl"
  psiPackage="com.ashelkov.hoon.plugin.psi"
  psiImplPackage="com.ashelkov.hoon.plugin.psi.impl"

  elementTypeHolderClass="com.ashelkov.hoon.plugin.psi.HoonTypes"
  elementTypeClass="com.ashelkov.hoon.plugin.psi.HoonElementType"
  tokenTypeClass="com.ashelkov.hoon.plugin.psi.HoonTokenType"

  psiImplUtilClass="com.ashelkov.hoon.plugin.psi.impl.HoonPsiImplUtil"

  extends("tall_......_expression")=tall_hoon_expression
  extends("wide_......_expression")=wide_hoon_expression
  extends("irregular_......_expression")=irregular_hoon_expression
}

userspace_hoon_file ::= { ford_block }? hoon_block

// =====================================================================================================================
// Ford expression grammar
// =====================================================================================================================

// https://urbit.org/docs/arvo/ford/ford#ford_runes
ford_block ::= { gap }?
               { faswut_block }?
               { fashep_block }?
               { faslus_block }?
               { fastis_block }?
               { fastar_block }?
               { fasbuc_block }?
               { fassig_block }?
               { fascen_block }?

faswut_block ::= <<fas_block faswut_expression>>
faswut_expression ::= FASWUT gap non_hoon_number

fashep_block ::= <<fas_block fashep_expression>>
fashep_expression ::= FASHEP gap <<ford_list file_import>>

faslus_block ::= <<fas_block faslus_expression>>
faslus_expression ::= FASLUS gap <<ford_list file_import>>

fastis_block ::= <<fas_block fastis_expression>>
fastis_expression ::= FASTIS gap SKIN gap SIMPLE_PATH

fastar_block ::= <<fas_block fastar_expression>>
fastar_expression ::= FASTAR gap SKIN gap TERM gap SIMPLE_PATH

fasbuc_block ::= <<fas_block fasbuc_expression>>
fasbuc_expression ::= FASBUC gap SKIN gap TERM gap TERM

fassig_block ::= <<fas_block fassig_expression>>
fassig_expression ::= FASSIG gap SKIN gap spec gap SIMPLE_PATH

fascen_block ::= <<fas_block fascen_expression>>
fascen_expression ::= FASCEN gap SKIN gap TERM

file_import ::= faceless_file_import | faced_file_import | default_file_import
faceless_file_import ::= TAR SKIN {extends=file_import}
faced_file_import ::= FACE_ASSIGNMENT SKIN {extends=file_import}
default_file_import ::= SKIN {extends=file_import}

private meta fas_block ::= <<gapped_list <<rule>>>> gap
private meta ford_list ::= <<p>> { COM { ACE | gap }? <<p>> }*

// =====================================================================================================================
// Base Hoon expression grammar
// =====================================================================================================================

hoon_block ::= <<gapped_list hoon_expression>> { gap }?
hoon_expression ::= tall_expression | wide_expression

spec_expression ::= tall_spec_expression | wide_spec_expression
sail_expression ::= tall_sail_expression | wide_sail_expression

// =====================================================================================================================
// Tall expressions
// =====================================================================================================================

tall_expression ::= tall_hoon_expression | tall_sail_expression | tall_spec_expression {extends=hoon_expression}

//
// Tall SAIL expressions
//

tall_sail_expression ::= tall_sail_params_only_expression |
                         tall_sail_simple_expression |
                         tall_sail_dot_expression |
                         sail_rune_expression
                         {extends=tall_expression}
tall_sail_params_only_expression ::= tall_sail_init { gap tall_sail_param }+ MIC {extends=tall_sail_expression}
tall_sail_simple_expression ::= tall_sail_init { wide_sail_params_subexpression }?
                                { gap sail_expression }+
                                tall_list_terminator
                                {extends=tall_sail_expression}
tall_sail_dot_expression ::= tall_sail_init DOT SKIN
                             { gap sail_expression }+
                             tall_list_terminator
                             {extends=tall_sail_expression}
private tall_sail_init ::= MIC SKIN
private tall_sail_param ::= TIS sail_skin gap (SIMPLE_TAPE | MULTILINE_TAPE)
// Handler for generic text in tall SAIL form
//private tall_sail_input ::= tall_sail_subexpression | tall_sail_text
//private tall_sail_subexpression ::= gap sail_expression {pin=2}
//private tall_sail_text ::= gap (literal | constant) {recoverWhile="tall_sail_recover"}
//private tall_sail_text ::= gap (literal | constant) {recoverWhile="tall_sail_recover"}
//private tall_sail_recover ::= !(gap)

//
// Tall spec expressions
//

tall_spec_expression ::= tall_buc_expression |
                         tall_cencol_expression |
                         tall_cenhep_expression |
                         tall_cenket_expression |
                         tall_cenlus_expression |
                         tall_censig_expression
                         {extends=tall_expression}

//
// Tall Hoon expressions
//

tall_hoon_expression ::= tall_dot_expression |
                         tall_zap_expression |
                         tall_tis_expression |
                         tall_wut_expression |
                         tall_bar_expression |
                         tall_col_expression |
                         tall_cen_expression |
                         tall_ket_expression |
                         tall_mic_expression |
                         tall_sig_expression
                         {extends=tall_expression}

// Rune groupings for convenience
private tall_dot_expression ::= tall_dotket_expression |
                                tall_dotlus_expression |
                                tall_dottar_expression |
                                tall_dottis_expression |
                                tall_dotwut_expression
private tall_zap_expression ::= tall_zapcol_expression |
                                tall_zapcom_expression |
                                tall_zapdot_expression |
                                tall_zapgal_expression |
                                tall_zapgar_expression |
                                tall_zapmic_expression |
                                tall_zappat_expression |
                                tall_zaptis_expression |
                                tall_zapwut_expression
private tall_tis_expression ::= tall_tisbar_expression |
                                tall_tiscol_expression |
                                tall_tiscom_expression |
                                tall_tisdot_expression |
                                tall_tisfas_expression |
                                tall_tisgal_expression |
                                tall_tisgar_expression |
                                tall_tishep_expression |
                                tall_tisket_expression |
                                tall_tislus_expression |
                                tall_tismic_expression |
                                tall_tissig_expression |
                                tall_tistar_expression |
                                tall_tiswut_expression
private tall_wut_expression ::= tall_wutbar_expression |
                                tall_wutcol_expression |
                                tall_wutdot_expression |
                                tall_wutgal_expression |
                                tall_wutgar_expression |
                                tall_wuthep_expression |
                                tall_wutket_expression |
                                tall_wutlus_expression |
                                tall_wutpam_expression |
                                tall_wutpat_expression |
                                tall_wutsig_expression |
                                tall_wuttis_expression |
                                tall_wutzap_expression
private tall_bar_expression ::= tall_barbuc_expression |
                                tall_barcab_expression |
                                tall_barcen_expression |
                                tall_barcol_expression |
                                tall_bardot_expression |
                                tall_barhep_expression |
                                tall_barket_expression |
                                tall_barpat_expression |
                                tall_barsig_expression |
                                tall_bartar_expression |
                                tall_bartis_expression |
                                tall_barwut_expression
private tall_col_expression ::= tall_colcab_expression |
                                tall_colhep_expression |
                                tall_colket_expression |
                                tall_collus_expression |
                                tall_colsig_expression |
                                tall_coltar_expression
private tall_cen_expression ::= tall_cencab_expression |
                                tall_cencol_expression |
                                tall_cendot_expression |
                                tall_cenhep_expression |
                                tall_cenket_expression |
                                tall_cenlus_expression |
                                tall_censig_expression |
                                tall_centar_expression |
                                tall_centis_expression
private tall_ket_expression ::= tall_ketbar_expression |
                                tall_ketcol_expression |
                                tall_ketdot_expression |
                                tall_kethep_expression |
                                tall_ketlus_expression |
                                tall_ketpam_expression |
                                tall_ketsig_expression |
                                tall_kettar_expression |
                                tall_kettis_expression |
                                tall_ketwut_expression
private tall_buc_expression ::= tall_bucbar_expression |
                                tall_buccab_expression |
                                tall_buccen_expression |
                                tall_buccol_expression |
                                tall_bucgal_expression |
                                tall_bucgar_expression |
                                tall_buchep_expression |
                                tall_bucket_expression |
                                tall_bucpam_expression |
                                tall_bucsig_expression |
                                tall_bucpat_expression |
                                tall_buctis_expression |
                                tall_bucwut_expression
private tall_mic_expression ::= tall_miccol_expression |
                                tall_micfas_expression |
                                tall_micgal_expression |
                                tall_miclus_expression |
                                tall_micmic_expression |
                                tall_micsig_expression |
                                tall_mictar_expression |
                                tall_mictis_expression
private tall_sig_expression ::= tall_sigbar_expression |
                                tall_sigbuc_expression |
                                tall_sigcab_expression |
                                tall_sigcen_expression |
                                tall_sigfas_expression |
                                tall_siggal_expression |
                                tall_siggar_expression |
                                tall_siglus_expression |
                                tall_sigpam_expression |
                                tall_sigtis_expression |
                                tall_sigwut_expression |
                                tall_sigzap_expression

// Rune expressions
// . runes
tall_dotket_expression ::= DOTKET tall_input_spec tall_input_term { tall_input_hoon }+ tall_list_terminator
tall_dotlus_expression ::= DOTLUS tall_input_hoon
tall_dottar_expression ::= DOTTAR tall_input_hoon tall_input_hoon
tall_dottis_expression ::= DOTTIS tall_input_hoon tall_input_hoon
tall_dotwut_expression ::= DOTWUT tall_input_hoon

// ! runes
tall_zapcol_expression ::= ZAPCOL tall_input_hoon
tall_zapcom_expression ::= ZAPCOM tall_input_hoon tall_input_hoon
tall_zapdot_expression ::= ZAPDOT tall_input_hoon
tall_zapgal_expression ::= ZAPGAL tall_input_spec tall_input_hoon
tall_zapgar_expression ::= ZAPGAR tall_input_hoon
tall_zapmic_expression ::= ZAPMIC tall_input_hoon tall_input_hoon
tall_zappat_expression ::= ZAPPAT tall_input_wing tall_input_hoon tall_input_hoon
tall_zaptis_expression ::= ZAPTIS tall_input_hoon
tall_zapwut_expression ::= ZAPWUT gap non_hoon_number tall_input_hoon

// = runes
tall_tisbar_expression ::= TISBAR tall_input_spec tall_input_hoon
tall_tiscol_expression ::= TISCOL { tall_input_wing tall_input_hoon }+ tall_list_terminator tall_input_hoon
tall_tiscom_expression ::= TISCOM gap { FACE_ASSIGNMENT }? wing_expression tall_input_hoon
tall_tisdot_expression ::= TISDOT tall_input_wing tall_input_hoon tall_input_hoon
tall_tisfas_expression ::= TISFAS tall_input_spec tall_input_hoon tall_input_hoon
tall_tisgal_expression ::= TISGAL tall_input_hoon tall_input_hoon
tall_tisgar_expression ::= TISGAR tall_input_hoon tall_input_hoon
tall_tishep_expression ::= TISHEP tall_input_hoon tall_input_hoon
tall_tisket_expression ::= TISKET tall_input_spec tall_input_wing tall_input_hoon tall_input_hoon
tall_tislus_expression ::= TISLUS tall_input_hoon tall_input_hoon
tall_tismic_expression ::= TISMIC tall_input_spec tall_input_hoon tall_input_hoon
tall_tissig_expression ::= TISSIG tall_input_hoon { tall_input_hoon }+ tall_list_terminator
tall_tistar_expression ::= TISTAR gap (irregular_buctis_1_expression | SKIN) tall_input_hoon tall_input_hoon
tall_tiswut_expression ::= TISWUT tall_input_wing tall_input_hoon tall_input_hoon tall_input_hoon

// ? runes
tall_wutbar_expression ::= WUTBAR { tall_input_hoon }+ tall_list_terminator
tall_wutcol_expression ::= WUTCOL tall_input_hoon tall_input_hoon tall_input_hoon
tall_wutdot_expression ::= WUTDOT tall_input_hoon tall_input_hoon tall_input_hoon
tall_wutgal_expression ::= WUTGAL tall_input_hoon tall_input_hoon
tall_wutgar_expression ::= WUTGAR tall_input_hoon tall_input_hoon
tall_wuthep_expression ::= WUTHEP tall_input_switch { tall_input_spec tall_input_hoon }+ tall_list_terminator
tall_wutket_expression ::= WUTKET tall_input_hoon tall_input_hoon tall_input_hoon
tall_wutlus_expression ::= WUTLUS
                           tall_input_switch tall_input_hoon
                           { tall_input_spec tall_input_hoon }+
                           tall_list_terminator
tall_wutpam_expression ::= WUTPAM { tall_input_hoon }+ tall_list_terminator
tall_wutpat_expression ::= WUTPAT tall_input_wing tall_input_hoon tall_input_hoon
tall_wutsig_expression ::= WUTSIG tall_input_hoon tall_input_hoon tall_input_hoon
tall_wuttis_expression ::= WUTTIS tall_input_spec tall_input_hoon
tall_wutzap_expression ::= WUTZAP tall_input_hoon

// | runes
tall_barbuc_expression ::= BARBUC
                           (
                               { { tall_input_skin }+ tall_list_terminator } |
                               { gap <<bracketed <<list_one_or_more SKIN ACE>>>> }
                           )
                           tall_input_spec
tall_barcab_expression ::= BARCAB tall_input_spec { tall_input_arm }* tall_core_terminator
tall_barcen_expression ::= BARCEN { tall_input_arm }* tall_core_terminator
tall_barcol_expression ::= BARCOL tall_input_hoon tall_input_hoon
tall_bardot_expression ::= BARDOT tall_input_hoon
tall_barhep_expression ::= BARHEP tall_input_hoon
tall_barket_expression ::= BARKET tall_input_hoon { tall_input_arm }* tall_core_terminator
tall_barpat_expression ::= BARPAT { tall_input_arm }* tall_core_terminator
tall_barsig_expression ::= BARSIG tall_input_spec tall_input_hoon
tall_bartar_expression ::= BARTAR tall_input_spec tall_input_hoon
tall_bartis_expression ::= BARTIS tall_input_spec tall_input_hoon
tall_barwut_expression ::= BARWUT tall_input_hoon

arm_expression ::= lusbar_expression | lusbuc_expression | luslus_expression | lustar_expression {extends=tall_hoon_expression}
lusbar_expression ::= LUSBAR tall_input_term {extends=arm_expression}
lusbuc_expression ::= LUSBUC tall_input_skin tall_input_spec {extends=arm_expression}
luslus_expression ::= LUSLUS { gap (SKIN | BUC) } tall_input_hoon {extends=arm_expression}
lustar_expression ::= LUSTAR { tall_input_skin tall_input_hoon }+ {extends=arm_expression}

// : runes
tall_colcab_expression ::= COLCAB tall_input_hoon tall_input_hoon
tall_colhep_expression ::= COLHEP tall_input_hoon tall_input_hoon
tall_colket_expression ::= COLKET tall_input_hoon tall_input_hoon tall_input_hoon tall_input_hoon
tall_collus_expression ::= COLLUS tall_input_hoon tall_input_hoon tall_input_hoon
tall_colsig_expression ::= COLSIG { tall_input_hoon }+ tall_list_terminator
tall_coltar_expression ::= COLTAR { tall_input_hoon }+ tall_list_terminator

// % runes
tall_cencab_expression ::= CENCAB tall_input_wing { tall_input_wing tall_input_hoon }+ tall_list_terminator
tall_cencol_expression ::= CENCOL tall_input_hoon { tall_input_hoon }+ tall_list_terminator
tall_cendot_expression ::= CENDOT tall_input_hoon tall_input_hoon
tall_cenhep_expression ::= CENHEP tall_input_hoon tall_input_hoon
tall_cenket_expression ::= CENKET tall_input_hoon tall_input_hoon tall_input_hoon tall_input_hoon
tall_cenlus_expression ::= CENLUS tall_input_hoon tall_input_hoon tall_input_hoon
tall_censig_expression ::= CENSIG tall_input_wing tall_input_hoon tall_input_hoon
tall_centar_expression ::= CENTAR
                           tall_input_wing
                           tall_input_hoon
                           { tall_input_wing tall_input_hoon }+
                           tall_list_terminator
tall_centis_expression ::= CENTIS tall_input_wing { tall_input_wing tall_input_hoon }+ tall_list_terminator

// ^ runes
tall_ketbar_expression ::= KETBAR tall_input_hoon
tall_ketcol_expression ::= KETCOL tall_input_spec
tall_ketdot_expression ::= KETDOT tall_input_hoon tall_input_hoon
tall_kethep_expression ::= KETHEP tall_input_spec tall_input_hoon
tall_ketlus_expression ::= KETLUS tall_input_hoon tall_input_hoon
tall_ketpam_expression ::= KETPAM tall_input_hoon
tall_ketsig_expression ::= KETSIG tall_input_hoon
tall_kettar_expression ::= KETTAR tall_input_spec
tall_kettis_expression ::= KETTIS tall_input_spec tall_input_hoon
tall_ketwut_expression ::= KETWUT tall_input_hoon

// $ runes
tall_bucbar_expression ::= BUCBAR tall_input_spec tall_input_hoon
tall_buccab_expression ::= BUCCAB tall_input_hoon
tall_buccen_expression ::= BUCCEN { tall_input_spec }+ tall_list_terminator
tall_buccol_expression ::= BUCCOL { tall_input_spec }+ tall_list_terminator
tall_bucgal_expression ::= BUCGAL tall_input_spec tall_input_spec
tall_bucgar_expression ::= BUCGAR tall_input_spec tall_input_spec
tall_buchep_expression ::= BUCHEP tall_input_spec tall_input_spec
tall_bucket_expression ::= BUCKET tall_input_spec tall_input_spec
tall_bucpam_expression ::= BUCPAM tall_input_spec tall_input_hoon
tall_bucsig_expression ::= BUCSIG tall_input_hoon tall_input_spec
tall_bucpat_expression ::= BUCPAT tall_input_spec tall_input_spec
tall_buctis_expression ::= BUCTIS tall_input_skin tall_input_spec
tall_bucwut_expression ::= BUCWUT { tall_input_spec }+ tall_list_terminator

// ; runes
tall_miccol_expression ::= MICCOL tall_input_hoon { tall_input_hoon }+ tall_list_terminator
tall_micfas_expression ::= MICFAS tall_input_hoon
tall_micgal_expression ::= MICGAL tall_input_spec tall_input_hoon tall_input_hoon tall_input_hoon
tall_miclus_expression ::= MICLUS tall_input_hoon
tall_micmic_expression ::= MICMIC tall_input_spec tall_input_hoon
tall_micsig_expression ::= MICSIG tall_input_hoon { tall_input_hoon }+ tall_list_terminator
tall_mictar_expression ::= MICTAR tall_input_hoon
tall_mictis_expression ::= MICTIS { tall_input_hoon }+ tall_list_terminator

// ~ runes
tall_sigbar_expression ::= SIGBAR tall_input_hoon tall_input_hoon
tall_sigbuc_expression ::= SIGBUC tall_input_term tall_input_hoon
tall_sigcab_expression ::= SIGCAB tall_input_hoon tall_input_hoon
tall_sigcen_expression ::= SIGCEN
                           gap (CHUM | TERM)
                           gap (SIG | wing_expression)
                           gap (SIG | { TISTIS { tall_input_term tall_input_hoon }+ tall_list_terminator })
                           tall_input_hoon
tall_sigfas_expression ::= SIGFAS tall_input_term tall_input_hoon
tall_siggal_expression ::= SIGGAL tall_input_term { DOT (wide_expression | tall_input_hoon) }? tall_input_hoon
tall_siggar_expression ::= SIGGAR tall_input_term { DOT (wide_expression | tall_input_hoon) }? tall_input_hoon
tall_siglus_expression ::= SIGLUS tall_input_hoon
tall_sigpam_expression ::= SIGPAM { gap GAR { GAR { GAR }? }? }? tall_input_hoon tall_input_hoon
tall_sigtis_expression ::= SIGTIS tall_input_hoon tall_input_hoon
tall_sigwut_expression ::= SIGWUT tall_input_hoon tall_input_hoon tall_input_hoon
tall_sigzap_expression ::= SIGZAP tall_input_hoon tall_input_hoon

// Generic helpers
private tall_input_term ::= <<tall_input TERM>>
private tall_input_skin ::= <<tall_input SKIN>>
private tall_input_wing ::= <<tall_input wing_expression>>
private tall_input_spec ::= <<tall_input spec_expression>>
private tall_input_hoon ::= <<tall_input hoon_expression>>
private tall_input_arm ::= <<tall_input arm_expression>>
private tall_input_switch ::= <<tall_input switch_input>>
private tall_core_terminator ::= <<tall_input HEPHEP>>
private tall_list_terminator ::= <<tall_input TISTIS>>

private meta tall_input ::= gap <<p>>

// =====================================================================================================================
// Wide expressions
// =====================================================================================================================

// Need to split spec & wing expressions into parts because of single-symbol spec/wing expression precedence
wide_expression ::= (wide_hoon_expression |
                    irregular_hoon_expression |
                    wide_sail_expression |
                    long_wing_expression |
                    advanced_wide_spec_expression |
                    basic_wide_spec_expression |
                    short_wing_expression |
                    constant |
                    literal)
                    { (COL | KET) wide_expression }?
                    {extends=hoon_expression}

//
// Wide SAIL expressions
//

wide_sail_expression ::= MIC
                         <<list_one_or_more { SKIN { wide_sail_subexpression }? } COL>>
                         ({ COL wide_sail_string } | MIC)
                         {extends=wide_expression}
wide_sail_subexpression ::= wide_sail_params_subexpression |
                            wide_sail_dot_subexpression |
                            wide_sail_fas_subexpression |
                            wide_sail_hax_subexpression |
                            wide_sail_pat_subexpression
wide_sail_params_subexpression ::= PAL
                                   { <<list_one_or_more wide_sail_param { COM ACE }>> }?
                                   PAR
                                   {extends=wide_sail_subexpression}
wide_sail_dot_subexpression ::= DOT SKIN
                                {
                                    wide_sail_params_subexpression |
                                    wide_sail_dot_subexpression |
                                    wide_sail_fas_subexpression |
                                    wide_sail_pat_subexpression
                                }?
                                {extends=wide_sail_subexpression}
wide_sail_fas_subexpression ::= FAS SIMPLE_TAPE { wide_sail_params_subexpression }? {extends=wide_sail_subexpression}
wide_sail_hax_subexpression ::= HAX SKIN
                                {
                                    wide_sail_params_subexpression |
                                    wide_sail_dot_subexpression |
                                    wide_sail_fas_subexpression |
                                    wide_sail_pat_subexpression
                                }?
                                {extends=wide_sail_subexpression}
wide_sail_pat_subexpression ::= PAT SIMPLE_TAPE { wide_sail_params_subexpression }? {extends=wide_sail_subexpression}

private wide_sail_param ::= sail_skin ACE (irregular_hoon_expression | wide_hoon_expression | SIMPLE_TAPE | SKIN)
private wide_sail_string ::= SIMPLE_CORD | SIMPLE_TAPE | MULTILINE_CORD | MULTILINE_TAPE

//
// Wing expressions
//

wing_expression ::= wing_fragment { DOT wing_fragment }* {extends=wide_expression}

long_wing_expression ::= wing_fragment { DOT wing_fragment }+ {extends=wide_expression}
short_wing_expression ::= wing_fragment {extends=wide_expression}

private wing_fragment ::= skin_as_wing_or_spec | tree_address | lark | COM | DOT

//
// Wide spec expressions
//

wide_spec_expression ::= irregular_buctis_2_expression | major_wide_spec_expression {extends=wide_expression}
major_wide_spec_expression ::= multi_char_specs | single_char_specs {extends=wide_spec_expression}

// Wide expression convenience helpers
advanced_wide_spec_expression ::= irregular_buctis_2_expression | multi_char_specs {extends=wide_expression}
basic_wide_spec_expression ::= single_char_specs {extends=wide_expression}

private multi_char_specs ::= irregular_buccab_expression |
                             irregular_buccol_expression |
                             irregular_buctis_1_expression |
                             irregular_bucwut_expression |
                             wide_buc_expression |
                             wide_func_expression |
                             skin_as_wing_or_spec |
                             constant |
                             AURA |
                             TERM |
                             LOOBEAN
private single_char_specs ::= KET | PAT | SIG | TAR | WUT

//
// Wide Hoon expressions
//

wide_hoon_expression ::= wide_dot_expression |
                         wide_zap_expression |
                         wide_tis_expression |
                         wide_wut_expression |
                         wide_bar_expression |
                         wide_col_expression |
                         wide_cen_expression |
                         wide_ket_expression |
                         wide_mic_expression |
                         wide_sig_expression
                         {extends=wide_expression}

// Rune groupings for convenience
private wide_dot_expression ::= wide_dotket_expression |
                                wide_dotlus_expression |
                                wide_dottar_expression |
                                wide_dottis_expression |
                                wide_dotwut_expression
private wide_zap_expression ::= wide_zapcol_expression |
                                wide_zapcom_expression |
                                wide_zapdot_expression |
                                wide_zapgal_expression |
                                wide_zapgar_expression |
                                wide_zapmic_expression |
                                wide_zappat_expression |
                                wide_zaptis_expression |
                                wide_zapwut_expression |
                                wide_zapzap_expression
private wide_tis_expression ::= wide_tisbar_expression |
                                wide_tiscol_expression |
                                wide_tiscom_expression |
                                wide_tisdot_expression |
                                wide_tisfas_expression |
                                wide_tisgal_expression |
                                wide_tisgar_expression |
                                wide_tishep_expression |
                                wide_tisket_expression |
                                wide_tislus_expression |
                                wide_tismic_expression |
                                wide_tissig_expression |
                                wide_tistar_expression |
                                wide_tiswut_expression
private wide_wut_expression ::= wide_wutbar_expression |
                                wide_wutcol_expression |
                                wide_wutdot_expression |
                                wide_wutgal_expression |
                                wide_wutgar_expression |
                                wide_wuthep_expression |
                                wide_wutket_expression |
                                wide_wutlus_expression |
                                wide_wutpam_expression |
                                wide_wutpat_expression |
                                wide_wutsig_expression |
                                wide_wuttis_expression |
                                wide_wutzap_expression
private wide_bar_expression ::= wide_barbuc_expression |
                                wide_barcol_expression |
                                wide_bardot_expression |
                                wide_barhep_expression |
                                wide_barsig_expression |
                                wide_bartar_expression |
                                wide_bartis_expression |
                                wide_barwut_expression
private wide_col_expression ::= wide_colcab_expression |
                                wide_colhep_expression |
                                wide_colket_expression |
                                wide_collus_expression |
                                wide_colsig_expression |
                                wide_coltar_expression
private wide_cen_expression ::= wide_cencab_expression |
                                wide_cencol_expression |
                                wide_cendot_expression |
                                wide_cenhep_expression |
                                wide_cenket_expression |
                                wide_cenlus_expression |
                                wide_censig_expression |
                                wide_centar_expression |
                                wide_centis_expression
private wide_ket_expression ::= wide_ketbar_expression |
                                wide_ketcol_expression |
                                wide_ketdot_expression |
                                wide_kethep_expression |
                                wide_ketlus_expression |
                                wide_ketpam_expression |
                                wide_ketsig_expression |
                                wide_kettar_expression |
                                wide_kettis_expression |
                                wide_ketwut_expression
private wide_buc_expression ::= wide_bucbar_expression |
                                wide_buccab_expression |
                                wide_buccen_expression |
                                wide_buccol_expression |
                                wide_bucgal_expression |
                                wide_bucgar_expression |
                                wide_buchep_expression |
                                wide_bucmic_expression |
                                wide_bucket_expression |
                                wide_bucpam_expression |
                                wide_bucsig_expression |
                                wide_bucpat_expression |
                                wide_buctis_expression |
                                wide_bucwut_expression
private wide_mic_expression ::= wide_miccol_expression |
                                wide_micfas_expression |
                                wide_micgal_expression |
                                wide_miclus_expression |
                                wide_micmic_expression |
                                wide_micsig_expression |
                                wide_mictar_expression |
                                wide_mictis_expression
private wide_sig_expression ::= wide_sigbar_expression |
                                wide_sigbuc_expression |
                                wide_sigcab_expression |
                                wide_sigfas_expression |
                                wide_siggal_expression |
                                wide_siggar_expression |
                                wide_siglus_expression |
                                wide_sigpam_expression |
                                wide_sigtis_expression |
                                wide_sigwut_expression |
                                wide_sigzap_expression

private wide_func_expression ::= wide_cencol_expression |
                                 wide_cenhep_expression |
                                 wide_cenket_expression |
                                 wide_cenlus_expression |
                                 wide_censig_expression |
                                 irregular_cencol_expression |
                                 irregular_censig_expression

// Rune expressions
// . runes
wide_dotket_expression ::= DOTKET
                           <<paranthesized { wide_spec_expression ACE <<list_one_or_more specless_expression ACE>> }>>
                           {extends=wide_dotket_expression}
wide_dotlus_expression ::= <<wide_1_fixed_template DOTLUS wide_expression>>
wide_dottar_expression ::= <<wide_2_fixed_template DOTTAR wide_expression wide_expression>>
wide_dottis_expression ::= <<wide_2_fixed_template DOTTIS wide_expression wide_expression>>
wide_dotwut_expression ::= <<wide_1_fixed_template DOTWUT wide_expression>>

// ! runes
wide_zapcol_expression ::= <<wide_1_fixed_template ZAPCOL wide_expression>>
wide_zapcom_expression ::= <<wide_2_fixed_template ZAPCOM wide_expression wide_expression>>
wide_zapdot_expression ::= <<wide_1_fixed_template ZAPDOT wide_expression>>
wide_zapgal_expression ::= <<wide_2_fixed_template ZAPGAL wide_spec_expression wide_expression>>
wide_zapgar_expression ::= <<wide_1_fixed_template ZAPGAR wide_expression>>
wide_zapmic_expression ::= <<wide_2_fixed_template ZAPMIC wide_expression wide_expression>>
wide_zappat_expression ::= <<wide_3_fixed_template ZAPPAT wing_expression wide_expression wide_expression>>
wide_zaptis_expression ::= <<wide_1_fixed_template ZAPTIS wide_expression>>
wide_zapwut_expression ::= <<wide_2_fixed_template ZAPWUT non_hoon_number wide_expression>>
wide_zapzap_expression ::= ZAPZAP

// = runes
wide_tisbar_expression ::= <<wide_2_fixed_template tisbar wide_spec_expression wide_expression>>
wide_tiscol_expression ::= TISCOL PAL
                           <<list_one_or_more { wing_expression ACE wide_expression } { COM ACE }>>
                           wide_expression
                           PAR
wide_tiscom_expression ::= TISCOM PAL { FACE_ASSIGNMENT }? wing_expression ACE wide_expression PAR
wide_tisdot_expression ::= <<wide_3_fixed_template TISDOT wing_expression wide_expression wide_expression>>
wide_tisfas_expression ::= <<wide_3_fixed_template TISFAS wide_spec_expression wide_expression wide_expression>>
wide_tisgal_expression ::= <<wide_2_fixed_template TISGAL wide_expression wide_expression>>
wide_tisgar_expression ::= <<wide_2_fixed_template TISGAR wide_expression wide_expression>>
wide_tishep_expression ::= <<wide_2_fixed_template TISHEP wide_expression wide_expression>>
wide_tisket_expression ::= <<wide_4_fixed_template TISKET wide_spec_expression wing_expression wide_expression wide_expression>>
wide_tislus_expression ::= <<wide_2_fixed_template TISLUS wide_expression wide_expression>>
wide_tismic_expression ::= <<wide_3_fixed_template TISMIC wide_spec_expression wide_expression wide_expression>>
wide_tissig_expression ::= TISSIG <<paranthesized <<list_two_or_more wide_expression ACE>>>>
wide_tistar_expression ::= <<wide_3_fixed_template TISTAR (irregular_buctis_1_expression | SKIN) wide_expression wide_expression>>
wide_tiswut_expression ::= <<wide_4_fixed_template TISWUT wing_expression wide_expression wide_expression wide_expression>>

// ? runes
wide_wutbar_expression ::= WUTBAR <<paranthesized <<list_one_or_more wide_expression ACE>>>>
wide_wutcol_expression ::= <<wide_3_fixed_template WUTCOL wide_expression wide_expression wide_expression>>
wide_wutdot_expression ::= <<wide_3_fixed_template WUTDOT wide_expression wide_expression wide_expression>>
wide_wutgal_expression ::= <<wide_2_fixed_template WUTGAL wide_expression wide_expression>>
wide_wutgar_expression ::= <<wide_2_fixed_template WUTGAR wide_expression wide_expression>>
wide_wuthep_expression ::= WUTHEP PAL
                           switch_input ACE
                           <<list_one_or_more { wide_spec_expression ACE wide_expression } { COM ACE }>>
                           PAR
wide_wutket_expression ::= <<wide_3_fixed_template WUTKET wing_expression wide_expression wide_expression>>
wide_wutlus_expression ::= WUTLUS PAL
                           switch_input ACE
                           wide_expression ACE
                           <<list_one_or_more { wide_spec_expression ACE wide_expression } { COM ACE }>>
                           PAR
wide_wutpam_expression ::= WUTPAM <<paranthesized <<list_one_or_more wide_expression ACE>>>>
wide_wutpat_expression ::= <<wide_3_fixed_template WUTPAT wing_expression wide_expression wide_expression>>
wide_wutsig_expression ::= <<wide_3_fixed_template WUTSIG wide_expression wide_expression wide_expression>>
wide_wuttis_expression ::= <<wide_2_fixed_template WUTTIS wide_spec_expression wide_expression>>
wide_wutzap_expression ::= <<wide_1_fixed_template WUTZAP wide_expression>>

// | runes
wide_barbuc_expression ::= BARBUC PAL
                           (<<bracketed <<list_one_or_more SKIN ACE>>>> | SKIN)
                           ACE wide_spec_expression
                           PAR
wide_barcol_expression ::= <<wide_2_fixed_template BARCOL wide_expression wide_expression>>
wide_bardot_expression ::= <<wide_1_fixed_template BARDOT wide_expression>>
wide_barhep_expression ::= <<wide_1_fixed_template BARHEP wide_expression>>
wide_barsig_expression ::= <<wide_2_fixed_template BARSIG wide_spec_expression wide_expression>>
wide_bartar_expression ::= <<wide_2_fixed_template BARTAR wide_spec_expression wide_expression>>
wide_bartis_expression ::= <<wide_2_fixed_template BARTIS wide_spec_expression wide_expression>>
wide_barwut_expression ::= <<wide_1_fixed_template BARWUT wide_expression>>

// : runes
wide_colcab_expression ::= <<wide_2_fixed_template COLCAB wide_expression wide_expression>>
wide_colhep_expression ::= <<wide_2_fixed_template COLHEP wide_expression wide_expression>>
wide_colket_expression ::= <<wide_4_fixed_template COLKET wide_expression wide_expression wide_expression wide_expression>>
wide_collus_expression ::= <<wide_3_fixed_template COLLUS wide_expression wide_expression wide_expression>>
wide_colsig_expression ::= COLSIG <<paranthesized <<list_one_or_more wide_expression ACE>>>>
wide_coltar_expression ::= COLTAR <<paranthesized <<list_one_or_more wide_expression ACE>>>>

// % runes
wide_cencab_expression ::= CENCAB PAL
                           wing_expression ACE
                           <<list_one_or_more { wing_expression ACE wide_expression } { COM ACE }>>
                           PAR
wide_cencol_expression ::= CENCOL <<paranthesized <<list_two_or_more wide_expression ACE>>>>
wide_cendot_expression ::= <<wide_2_fixed_template CENDOT wide_expression wide_expression>>
wide_cenhep_expression ::= <<wide_2_fixed_template CENHEP wide_expression wide_expression>>
wide_cenket_expression ::= <<wide_4_fixed_template CENKET wide_expression wide_expression wide_expression wide_expression>>
wide_cenlus_expression ::= <<wide_3_fixed_template CENLUS wide_expression wide_expression wide_expression>>
wide_censig_expression ::= <<wide_3_fixed_template CENSIG wing_expression wide_expression wide_expression>>
wide_centar_expression ::= CENTAR PAL
                           wing_expression ACE wide_expression ACE
                           <<list_one_or_more { wing_expression ACE wide_expression } { COM ACE }>>
                           PAR
wide_centis_expression ::= CENTIS PAL
                           wing_expression ACE
                           <<list_one_or_more { wing_expression ACE wide_expression } { COM ACE }>>
                           PAR

// ^ runes
wide_ketbar_expression ::= <<wide_1_fixed_template KETBAR wide_expression>>
wide_ketcol_expression ::= <<wide_1_fixed_template KETCOL wide_spec_expression>>
wide_ketdot_expression ::= <<wide_2_fixed_template KETDOT wide_expression wide_expression>>
wide_kethep_expression ::= <<wide_2_fixed_template KETHEP wide_spec_expression wide_expression>>
wide_ketlus_expression ::= <<wide_2_fixed_template KETLUS wide_expression wide_expression>>
wide_ketpam_expression ::= <<wide_1_fixed_template KETPAM wide_expression>>
wide_ketsig_expression ::= <<wide_1_fixed_template KETSIG wide_expression>>
wide_kettar_expression ::= <<wide_1_fixed_template KETTAR wide_expression>>
wide_kettis_expression ::= <<wide_2_fixed_template KETTIS wide_spec_expression wide_expression>>
wide_ketwut_expression ::= <<wide_1_fixed_template KETWUT wide_expression>>

// $ runes
wide_bucbar_expression ::= <<wide_2_fixed_template BUCBAR wide_spec_expression wide_expression>>
wide_buccab_expression ::= <<wide_1_fixed_template BUCCAB wide_expression>>
wide_buccen_expression ::= BUCCEN <<paranthesized <<list_one_or_more wide_spec_expression ACE>>>>
wide_buccol_expression ::= BUCCOL <<paranthesized <<list_one_or_more wide_spec_expression ACE>>>>
wide_bucgal_expression ::= <<wide_2_fixed_template BUCGAL wide_spec_expression wide_spec_expression>>
wide_bucgar_expression ::= <<wide_2_fixed_template BUCGAR wide_spec_expression wide_spec_expression>>
wide_buchep_expression ::= <<wide_2_fixed_template BUCHEP wide_spec_expression wide_spec_expression>>
wide_bucket_expression ::= <<wide_2_fixed_template BUCKET wide_spec_expression wide_spec_expression>>
wide_bucmic_expression ::= <<wide_1_fixed_template BUCMIC wide_buc_expression>>
wide_bucpam_expression ::= <<wide_2_fixed_template BUCPAM wide_spec_expression wide_expression>>
wide_bucsig_expression ::= <<wide_2_fixed_template BUCSIG wide_expression wide_spec_expression>>
wide_bucpat_expression ::= <<wide_2_fixed_template BUCPAT wide_spec_expression wide_spec_expression>>
wide_buctis_expression ::= <<wide_2_fixed_template BUCTIS SKIN wide_spec_expression>>
wide_bucwut_expression ::= BUCWUT <<paranthesized <<list_one_or_more wide_spec_expression ACE>>>>

// ; runes
wide_miccol_expression ::= MICCOL <<paranthesized <<list_two_or_more wide_expression ACE>>>>
wide_micfas_expression ::= <<wide_1_fixed_template MICFAS wide_expression>>
wide_micgal_expression ::= <<wide_4_fixed_template MICGAL wide_spec_expression wide_expression wide_expression wide_expression>>
wide_miclus_expression ::= <<wide_1_fixed_template MICLUS wide_expression>>
wide_micmic_expression ::= <<wide_2_fixed_template MICMIC wide_spec_expression wide_expression>>
wide_micsig_expression ::= MICSIG <<paranthesized <<list_two_or_more wide_expression ACE>>>>
wide_mictar_expression ::= <<wide_1_fixed_template MICTAR wide_expression>>
wide_mictis_expression ::= MICTIS <<paranthesized <<list_one_or_more wide_expression ACE>>>>

// ~ runes
wide_sigbar_expression ::= <<wide_2_fixed_template SIGBAR wide_expression wide_expression>>
wide_sigbuc_expression ::= <<wide_2_fixed_template SIGBUC TERM wide_expression>>
wide_sigcab_expression ::= <<wide_2_fixed_template SIGCAB wide_expression wide_expression>>
wide_sigfas_expression ::= <<wide_2_fixed_template SIGFAS TERM wide_expression>>
wide_siggal_expression ::= SIGGAL <<paranthesized { TERM { DOT wide_expression }? ACE wide_expression }>>
wide_siggar_expression ::= SIGGAR <<paranthesized { TERM { DOT wide_expression }? ACE wide_expression }>>
wide_siglus_expression ::= <<wide_1_fixed_template SIGLUS wide_expression>>
wide_sigpam_expression ::= SIGPAM PAL { GAR { GAR { GAR }? }? ACE }? wide_expression ACE wide_expression PAR
wide_sigtis_expression ::= <<wide_2_fixed_template SIGTIS wide_expression wide_expression>>
wide_sigwut_expression ::= <<wide_3_fixed_template SIGWUT wide_expression wide_expression wide_expression>>
wide_sigzap_expression ::= <<wide_2_fixed_template SIGZAP wide_expression wide_expression>>

// Generic helpers
private meta wide_1_fixed_template ::= <<rune>> <<paranthesized <<input>>>>
private meta wide_2_fixed_template ::= <<rune>> <<paranthesized { <<input1>> ACE <<input2>> }>>
private meta wide_3_fixed_template ::= <<rune>> <<paranthesized { <<input1>> ACE <<input2>> ACE <<input3>> }>>
private meta wide_4_fixed_template ::= <<rune>> <<paranthesized { <<input1>> ACE <<input2>> ACE <<input3>> ACE <<input4>> }>>

//
// Irregular expressions
//

irregular_hoon_expression ::= irregular_tang_expression |
                              irregular_tape_expression |
                              irregular_list_expression |
                              irregular_cask_expression |
                              irregular_rune_expression |
                              irregular_unit_expression |
                              irregular_not_eq_expression
                              {extends=wide_expression}

// Need kettis (^=) to have top priority for cases where assigning multiple faces at once
private irregular_rune_expression ::= irregular_kettis_expression |
                                      irregular_dotlus_expression |
                                      irregular_dottis_expression |
                                      irregular_wutbar_expression |
                                      irregular_wutpam_expression |
                                      irregular_wutzap_expression |
                                      irregular_colsig_expression |
                                      irregular_coltar_expression |
                                      irregular_cencol_expression |
                                      irregular_censig_expression |
                                      irregular_centis_expression |
                                      irregular_ketcol_expression |
                                      irregular_kethep_expression |
                                      irregular_kettar_expression |
                                      irregular_buccab_expression |
                                      irregular_buccol_expression |
                                      irregular_buctis_1_expression |
                                      irregular_buctis_2_expression |
                                      irregular_bucwut_expression |
                                      irregular_miccol_expression

// Irregular runes
irregular_dotlus_expression ::= LUS <<paranthesized wide_expression>>
irregular_dottis_expression ::= TIS <<paranthesized { wide_expression ACE wide_expression }>>
irregular_wutbar_expression ::= BAR <<paranthesized { <<list_one_or_more wide_expression ACE>> }>>
irregular_wutpam_expression ::= PAM <<paranthesized { <<list_one_or_more wide_expression ACE>> }>>
irregular_wutzap_expression ::= ZAP wide_expression
irregular_colsig_expression ::= SIG <<bracketed <<list_one_or_more wide_expression ACE>>>>
irregular_coltar_expression ::= <<bracketed <<list_one_or_more specless_expression ACE>>>>
irregular_cencol_expression ::= <<paranthesized <<list_one_or_more wide_expression ACE>>>>
irregular_censig_expression ::= SIG <<paranthesized { wing_expression ACE <<list_two_or_more wide_expression ACE>> }>>
irregular_centis_expression ::= wing_expression PAL
                                <<list_one_or_more { wing_expression ACE wide_expression } { COM ACE }>>
                                PAR
irregular_ketcol_expression ::= COM wide_spec_expression
irregular_kethep_expression ::= TIC (irregular_ketcol_expression | wide_spec_expression) TIC wide_expression
irregular_kettar_expression ::= TAR wide_spec_expression
irregular_kettis_expression ::= (BLOCK_FACE_ASSIGNMENT | FACE_ASSIGNMENT) specless_expression
irregular_buccab_expression ::= CAB wide_expression
irregular_buccol_expression ::= <<bracketed <<list_one_or_more wide_spec_expression ACE>>>>
irregular_buctis_1_expression ::= FACE_ASSIGNMENT major_wide_spec_expression
irregular_buctis_2_expression ::= TIS major_wide_spec_expression
irregular_bucwut_expression ::= WUT <<paranthesized <<list_one_or_more wide_spec_expression ACE>>>>
irregular_miccol_expression ::= COL <<paranthesized <<list_two_or_more wide_expression ACE>>>>

irregular_cask_expression ::= CASK_HEADER wide_expression {extends=irregular_hoon_expression}
irregular_list_expression ::= <<bracketed <<list_one_or_more wide_expression ACE>>>>
                              SIG
                              {extends=irregular_hoon_expression}
irregular_tape_expression ::= GAL <<list_one_or_more wide_expression ACE>> GAR {extends=irregular_hoon_expression}
irregular_tang_expression ::= GAR <<list_one_or_more wide_expression ACE>> GAL {extends=irregular_hoon_expression}
irregular_unit_expression ::= TIC wide_expression {extends=irregular_hoon_expression}
irregular_not_eq_expression ::= ZAPTIS <<paranthesized { wide_expression ACE wide_expression }>>

//
// Specless expressions
//

specless_expression ::= (wide_hoon_expression |
                        specless_irregular_expression |
                        wide_sail_expression |
                        wing_expression |
                        constant |
                        literal)
                        { (COL | KET) wide_expression }?
                        {extends=hoon_expression}
specless_irregular_expression ::= irregular_tang_expression |
                                  irregular_tape_expression |
                                  irregular_list_expression |
                                  irregular_cask_expression |
                                  specless_irregular_rune_expression |
                                  irregular_unit_expression |
                                  irregular_not_eq_expression
                                  {extends=specless_expression}
private specless_irregular_rune_expression ::= irregular_dotlus_expression |
                                               irregular_dottis_expression |
                                               irregular_wutbar_expression |
                                               irregular_wutpam_expression |
                                               irregular_wutzap_expression |
                                               irregular_colsig_expression |
                                               irregular_coltar_expression |
                                               irregular_cencol_expression |
                                               irregular_censig_expression |
                                               irregular_centis_expression |
                                               irregular_ketcol_expression |
                                               irregular_kethep_expression |
                                               irregular_kettar_expression |
                                               irregular_kettis_expression |
                                               irregular_miccol_expression

//
// Specialty rune inputs
//

private sail_rune_expression ::= tall_miclus_expression |
                                 tall_micfas_expression |
                                 tall_mictar_expression |
                                 tall_mictis_expression |
                                 wide_miclus_expression |
                                 wide_micfas_expression |
                                 wide_mictar_expression |
                                 wide_mictis_expression

switch_input ::= irregular_coltar_expression | wide_func_expression | wide_zapgal_expression | wing_expression

//
// Literals
//

literal ::= path |
            CONSTANT |
            UNICODE_CODEPOINT |
            RELATIVE_DATE |
            ABSOLUTE_DATE |
            IPV6 |
            IPV4 |
            UNSCRAMBLED_SHIP |
            SHIP |
            MULTILINE_TAPE |
            SIMPLE_TAPE |
            TERM |
            MULTILINE_CORD |
            SIMPLE_CORD |
            KNOT |
            all_hoon_numeric |
            loobean |
            null

//
// Larks
//

lark ::= lark_alpha { lark_beta lark_alpha }* { lark_beta }?
private lark_alpha ::= HEP | LUS
private lark_beta ::= GAL | GAR

//
// Paths
//

path ::= (SIMPLE_PATH | complex_path)
complex_path ::= (PATH_FRAGMENT | { FAS }+) (irregular_cencol_expression | path_interpolation) { path }? {extends=path}
private path_interpolation ::= <<bracketed specless_expression>>

//
// Slot indexing
//

tree_address ::= (BAR | LUS | PAM) non_hoon_number

//
// Token extensions
//

private sail_skin ::= SKIN | CAMEL_CASE_SKIN

skin_as_wing_or_spec ::= face { (COL | DOT) face }*
private face ::= { KET }* face_component
private face_component ::= SKIN | BUC

private non_hoon_number ::= THREE_DIGIT_DECIMAL | NON_HOON_NUM
private unsigned_decimal ::= THREE_DIGIT_DECIMAL | UNSIGNED_DECIMAL
private all_hoon_numeric ::= THREE_DIGIT_DECIMAL |
                             UNSIGNED_DECIMAL |
                             UNSIGNED_BINARY |
                             UNSIGNED_HEXADECIMAL |
                             UNSIGNED_B32 |
                             UNSIGNED_B58 |
                             UNSIGNED_B64 |
                             SIGNED_DECIMAL |
                             SIGNED_BINARY |
                             SIGNED_HEXADECIMAL |
                             SIGNED_B32 |
                             SIGNED_B58 |
                             SIGNED_B64 |
                             FLOAT |
                             DOUBLE |
                             HALF |
                             QUAD

private loobean ::= LOOBEAN | BAR | PAM

private null ::= SIG | FAS

//
// Core & shared grammar
//

private gap ::= { ACE }? { GAP }+

private meta gapped_list ::= <<list_one_or_more <<rule>> gap>>
private meta list_one_or_more ::= <<rule>> { <<separator>> <<rule>> }*
private meta list_two_or_more ::= <<rule>> { <<separator>> <<rule>> }+
private meta paranthesized ::= PAL <<rule>> PAR
private meta bracketed ::= SEL <<rule>> SER

//
// Dummy rules
//

private dummy ::= COMMENT

ford_rune ::= FASBUC | FASCEN | FASHEP | FASLUS | FASSIG | FASTAR | FASTIS | FASWUT
hoon_rune ::= DOTKET | DOTLUS | DOTTAR | DOTTIS | DOTWUT |
              ZAPCOL | ZAPCOM | ZAPDOT | ZAPGAL | ZAPGAR | ZAPMIC | ZAPPAT | ZAPTIS | ZAPWUT | ZAPZAP |
              TISBAR | TISCOL | TISCOM | TISDOT | TISFAS | TISGAL | TISGAR | TISHEP | TISKET | TISLUS | TISMIC | TISSIG | TISTAR | TISWUT |
              WUTBAR | WUTCOL | WUTDOT | WUTGAL | WUTGAR | WUTHEP | WUTKET | WUTLUS | WUTPAM | WUTPAT | WUTSIG | WUTTIS | WUTZAP |
              BARBUC | BARCAB | BARCEN | BARCOL | BARDOT | BARHEP | BARKET | BARPAT | BARSIG | BARTAR | BARTIS | BARWUT |
              COLCAB | COLHEP | COLKET | COLLUS | COLSIG | COLTAR |
              CENCAB | CENCOL | CENDOT | CENHEP | CENKET | CENLUS | CENSIG | CENTAR | CENTIS |
              KETBAR | KETCOL | KETDOT | KETHEP | KETLUS | KETPAM | KETSIG | KETTAR | KETTIS | KETWUT |
              BUCBAR | BUCCAB | BUCCEN | BUCCOL | BUCGAL | BUCGAR | BUCHEP | BUCMIC | BUCKET | BUCPAM | BUCPAT | BUCSIG | BUCTIS | BUCWUT |
              MICCOL | MICFAS | MICGAL | MICLUS | MICMIC | MICSIG | MICTAR | MICTIS |
              SIGBAR | SIGBUC | SIGCAB | SIGFAS | SIGGAL | SIGGAR | SIGLUS | SIGPAM | SIGTIS | SIGWUT | SIGZAP
