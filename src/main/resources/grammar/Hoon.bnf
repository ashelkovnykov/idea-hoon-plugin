/**
 * Documentation for generating this file:
 *   - https://github.com/JetBrains/Grammar-Kit
 *   - https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md
 *
 * Example files for inspiration:
 *   - https://github.com/Teinnsei/brainfuck-idea-plugin/blob/master/src/main/scala/Brainfuck.bnf
 *   - https://github.com/JetBrains/intellij-sdk-code-samples/blob/main/simple_language_plugin/src/main/java/org/intellij/sdk/language/Simple.bnf
 *   - https://github.com/JetBrains/Grammar-Kit/blob/master/grammars/Grammar.bnf
 */
{
  parserClass="com.ashelkov.hoon.plugin.parser.HoonParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Hoon"
  psiImplClassSuffix="Impl"
  psiPackage="com.ashelkov.hoon.plugin.psi"
  psiImplPackage="com.ashelkov.hoon.plugin.psi.impl"

  elementTypeHolderClass="com.ashelkov.hoon.plugin.psi.HoonTypes"
  elementTypeClass="com.ashelkov.hoon.plugin.psi.HoonElementType"
  tokenTypeClass="com.ashelkov.hoon.plugin.psi.HoonTokenType"

  psiImplUtilClass="com.ashelkov.hoon.plugin.psi.impl.HoonPsiImplUtil"
}

//
// Hoon userspace file grammar
//

// https://urbit.org/docs/arvo/ford/ford#ford-runes
userspace-hoon-file ::= ford-expression-block? hoon-expression-block

//
// Ford expression grammar
//

ford-expression-block ::= { gap }? { fashep-block }? { faslus-block }? { fastis-block }? { fastar-block }? gap

fashep-block ::= <<gapped-list fashep-expression>>
fashep-expression ::= FASHEP gap <<ford-list file-import>>

faslus-block ::= <<gapped-list faslus-expression>>
faslus-expression ::= FASLUS gap <<ford-list file-import>>

fastis-block ::= <<gapped-list fastis-expression>>
fastis-expression ::= FASTIS gap SKIN gap PATH

fastar-block ::= <<gapped-list fastar-expression>>
fastar-expression ::= FASTAR gap SKIN gap MARK gap PATH

file-import ::= default-import | face-import | faceless-import
default-import ::= SKIN {extends=file-import}
face-import ::= SKIN '=' SKIN {extends=file-import}
faceless-import ::= '*' SKIN {extends=file-import}

private meta ford-list ::= <<p>> { ',' { ' ' }? <<p>> }*

//
// Hoon expression grammar
//

hoon-expression-block ::= <<gapped-list hoon-expression>>
hoon-expression ::= rune-expression | sail-expression | literal | spec | wing

rune-expression ::= regular-expression | irregular-expression
regular-expression ::= tall-expression | wide-expression {extends=rune-expression}

small-expression ::= wide-expression | irregular-expression | literal | spec | wing  {extends=hoon-expression}
smaller-expression ::= literal | spec | wing {extends=hoon-expression}

// Tall expressions
tall-expression ::= tall-fixed-expression |
                    tall-running-expression |
                    tall-jogging-expression |
                    tall-core-expression |
                    tall-unique-expression {
                        extends=regular-expression
                    }

tall-fixed-expression ::= tall-1-fixed |
                          tall-2-fixed |
                          tall-3-fixed |
                          tall-4-fixed {
                              extends=tall-expression
                          }
private tall-1-fixed ::= tall-1-fixed-h | tall-1-fixed-s
private tall-1-fixed-h ::= rune-1-fixed-h tall-input-expression
private tall-1-fixed-s ::= rune-1-fixed-s tall-input-spec
private tall-2-fixed ::= tall-2-fixed-hh |
                         tall-2-fixed-sh |
                         tall-2-fixed-ss |
                         tall-2-fixed-th |
                         tall-zapwut-expression |
                         tall-tiscom-expression |
                         tall-wuttis-expression |
                         tall-bucsig-expression |
                         tall-buctis-expression
private tall-2-fixed-hh ::= rune-2-fixed-hh tall-input-expression tall-input-expression
private tall-2-fixed-sh ::= rune-2-fixed-sh tall-input-spec tall-input-expression
private tall-2-fixed-ss ::= rune-2-fixed-ss tall-input-spec tall-input-spec
private tall-2-fixed-th ::= rune-2-fixed-th tall-input-term tall-input-expression
private tall-zapwut-expression ::= '!?' gap NON_HOON_NUM tall-input-expression
private tall-tiscom-expression ::= '=,' gap <<list-two-or-more SKIN ':'>> tall-input-expression
private tall-wuttis-expression ::= '?=' tall-input-spec tall-input-wing
private tall-bucsig-expression ::= '$~' tall-input-expression tall-input-spec
private tall-buctis-expression ::= '$=' tall-input-skin tall-input-spec
private tall-3-fixed ::= tall-3-fixed-hhh | tall-3-fixed-shh | tall-3-fixed-whh | tall-tistar-expression
private tall-3-fixed-hhh ::= rune-3-fixed-hhh tall-input-expression tall-input-expression tall-input-expression
private tall-3-fixed-shh ::= rune-3-fixed-shh tall-input-spec tall-input-expression tall-input-expression
private tall-3-fixed-whh ::= rune-3-fixed-whh tall-input-wing tall-input-expression tall-input-expression
private tall-tistar-expression ::= '=*' gap (SKIN | irregular-kettis) tall-input-expression tall-input-expression
private tall-4-fixed ::= tall-4-fixed-hhhh | tall-tisket-expression | tall-tiswut-expression | tall-micgal-expression
private tall-4-fixed-hhhh ::= rune-4-fixed-hhhh
                              tall-input-expression
                              tall-input-expression
                              tall-input-expression
                              tall-input-expression
private tall-tisket-expression ::= '=^' tall-input-spec tall-input-wing tall-input-expression tall-input-expression
private tall-tiswut-expression ::= '=?'
                                   tall-input-wing
                                   tall-input-expression
                                   tall-input-expression
                                   tall-input-expression
private tall-micgal-expression ::= ';<'
                                   tall-input-spec
                                   tall-input-expression
                                   tall-input-expression
                                   tall-input-expression

tall-running-expression ::= tall-0-running | tall-1-running {extends=tall-expression}
private tall-0-running ::= tall-0-running-h | tall-0-running-s
private tall-0-running-h ::= rune-0-running-h { tall-input-expression }+ tall-list-terminator
private tall-0-running-s ::= rune-0-running-s { tall-input-spec }+ tall-list-terminator
private tall-1-running ::= rune-1-running-hh tall-input-expression { tall-input-expression }+ tall-list-terminator

tall-jogging-expression ::= tall-1-jogging | tall-2-jogging {extends=tall-expression}
private tall-1-jogging ::= tall-1-jogging-wwh | tall-wuthep-expression
private tall-1-jogging-wwh ::= rune-1-jogging-wwh
                               tall-input-wing
                               { tall-input-wing tall-input-expression }+
                               tall-list-terminator
private tall-wuthep-expression ::= '?-' tall-input-wing { tall-input-spec tall-input-expression }+ tall-list-terminator
private tall-2-jogging ::= tall-wutlus-expression | tall-centar-expression
private tall-wutlus-expression ::= '?+'
                                   tall-input-wing
                                   tall-input-expression
                                   { tall-input-spec tall-input-expression }+
                                   tall-list-terminator
private tall-centar-expression ::= '%*'
                                   tall-input-wing
                                   tall-input-expression
                                   { tall-input-wing tall-input-expression }+
                                   tall-list-terminator

tall-core-expression ::= tall-0-core | tall-1-core {extends=tall-expression}
private tall-0-core ::= rune-0-core { tall-input-arm }* tall-core-terminator
private tall-1-core ::= tall-barcab-expression | tall-barket-expression
private tall-barcab-expression ::= '|_'  tall-input-spec { tall-input-arm }* tall-core-terminator
private tall-barket-expression ::= '|^'  tall-input-expression { tall-input-arm }* tall-core-terminator

private tall-input-arm ::= <<tall-input arm-expression>>
arm-expression ::= lusbar-expression | lusbuc-expression | luslus-expression | lustar-expression
private lusbar-expression ::= '+|' tall-input-term {extends=arm-expression}
private lusbuc-expression ::= '+$' arm-named-expression {extends=arm-expression}
private luslus-expression ::= '++' arm-named-expression {extends=arm-expression}
private lustar-expression ::= '+*' { arm-named-expression }+ {extends=arm-expression}
private arm-named-expression ::= tall-input-skin tall-input-expression

tall-unique-expression ::= tall-dotket-expression |
                           tall-tiscol-expression |
                           tall-barbuc-expression |
                           tall-sigcen-expression |
                           tall-raw-hint-expression {
                               extends=tall-expression
                           }
private tall-dotket-expression ::= '.^' tall-input-spec tall-input-term <<tall-input PATH>> tall-list-terminator
private tall-tiscol-expression ::= '=:'
                                   { tall-input-wing tall-input-expression }+
                                   tall-list-terminator
                                   tall-input-expression
private tall-barbuc-expression ::= '|$' { tall-input-skin }+ tall-list-terminator tall-input-spec
private tall-sigcen-expression ::= '~%'
                      tall-input-term
                      tall-input-wing
                      gap ('~' | { '==' { tall-input-term tall-input-expression }+ tall-list-terminator })
                      tall-input-expression
private tall-raw-hint-expression ::= ('~<' | '~>') gap (TERM | { TERM '.' small-expression }) tall-input-expression

private tall-input-expression ::= <<tall-input hoon-expression>>
private tall-input-skin ::= <<tall-input SKIN>>
private tall-input-spec ::= <<tall-input spec>>
private tall-input-term ::= <<tall-input TERM>>
private tall-input-wing ::= <<tall-input wing>>
private tall-core-terminator ::= <<tall-input '--'>>
private tall-list-terminator ::= <<tall-input '=='>>

private meta tall-input ::= gap <<p>>

// Wide expressions
wide-expression ::= wide-fixed-expression |
                    wide-running-expression |
                    wide-jogging-expression |
                    wide-unique-expression {
                        extends=regular-expression
                    }

wide-fixed-expression ::= wide-0-fixed |
                          wide-1-fixed |
                          wide-2-fixed |
                          wide-3-fixed |
                          wide-4-fixed {
                              extends=wide-expression
                          }
private wide-0-fixed ::= '!!'
private wide-1-fixed ::= wide-1-fixed-h | wide-1-fixed-s
private wide-1-fixed-h ::= <<wide-1-fixed-template rune-1-fixed-h small-expression>>
private wide-1-fixed-s ::= <<wide-1-fixed-template rune-1-fixed-s spec>>
private wide-2-fixed ::= wide-2-fixed-hh |
                         wide-2-fixed-sh |
                         wide-2-fixed-ss |
                         wide-2-fixed-th |
                         wide-zapwut-expression |
                         wide-tiscom-expression |
                         wide-wuttis-expression |
                         wide-bucsig-expression
private wide-2-fixed-hh ::= <<wide-2-fixed-template rune-2-fixed-hh small-expression small-expression>>
private wide-2-fixed-sh ::= <<wide-2-fixed-template rune-2-fixed-sh spec small-expression>>
private wide-2-fixed-ss ::= <<wide-2-fixed-template rune-2-fixed-ss spec spec>>
private wide-2-fixed-th ::= <<wide-2-fixed-template rune-2-fixed-th TERM small-expression>>
private wide-zapwut-expression ::= <<wide-2-fixed-template '!?' NON_HOON_NUM small-expression>>
private wide-tiscom-expression ::= <<wide-2-fixed-template '=,' (SKIN | irregular-tisgal) small-expression>>
private wide-wuttis-expression ::= <<wide-2-fixed-template '?=' spec wing>>
private wide-bucsig-expression ::= <<wide-2-fixed-template '$~' small-expression spec>>
private wide-3-fixed ::= wide-3-fixed-hhh | wide-3-fixed-shh | wide-3-fixed-whh | wide-tistar-expression
private wide-3-fixed-hhh ::= <<wide-3-fixed-template rune-3-fixed-hhh small-expression small-expression small-expression>>
private wide-3-fixed-shh ::= <<wide-3-fixed-template rune-3-fixed-shh spec small-expression small-expression>>
private wide-3-fixed-whh ::= <<wide-3-fixed-template rune-3-fixed-whh wing small-expression small-expression>>
private wide-tistar-expression ::= <<wide-3-fixed-template '=*' (SKIN | irregular-kettis) small-expression small-expression>>
private wide-4-fixed ::= wide-4-fixed-hhhh | wide-tisket-expression | wide-tiswut-expression | wide-micgal-expression
private wide-4-fixed-hhhh ::= <<wide-4-fixed-template rune-4-fixed-hhhh small-expression small-expression small-expression small-expression>>
private wide-tisket-expression ::= <<wide-4-fixed-template '=^' spec wing small-expression small-expression>>
private wide-tiswut-expression ::= <<wide-4-fixed-template '=?' wing small-expression small-expression small-expression>>
private wide-micgal-expression ::= <<wide-4-fixed-template ';<' spec small-expression small-expression small-expression>>

wide-running-expression ::= wide-0-running | wide-1-running {extends=wide-expression}
private wide-0-running ::= wide-0-running-h | wide-0-running-s
private wide-0-running-h ::= rune-0-running-h '(' <<list-one-or-more small-expression ' '>> ')'
private wide-0-running-s ::= rune-0-running-s '(' <<list-one-or-more spec ' '>> ')'
private wide-1-running ::= rune-1-running-hh '(' <<list-two-or-more small-expression ' '>> ')'

wide-jogging-expression ::= wide-1-jogging | wide-2-jogging {extends=wide-expression}
private wide-1-jogging ::= wide-1-jogging-wwh | wide-wuthep-expression
private wide-1-jogging-wwh ::= rune-1-jogging-wwh '('
                               wing ' '
                               <<list-one-or-more { wing ' ' small-expression } ', '>>
                               ')'
private wide-wuthep-expression ::= '?-(' wing ' ' <<list-one-or-more { spec ' ' small-expression } ', '>> ')'
private wide-2-jogging ::= wide-wutlus-expression | wide-centar-expression
private wide-wutlus-expression ::= '?+('
                                   wing ' ' small-expression ' '
                                   <<list-one-or-more { spec ' ' small-expression } ', '>>
                                   ')'
private wide-centar-expression ::= '%*('
                                   wing ' ' small-expression ' '
                                   <<list-one-or-more { wing ' ' small-expression } ', '>>
                                   ')'

wide-unique-expression ::= wide-dotket-expression |
                           wide-tiscol-expression |
                           wide-barbuc-expression |
                           wide-raw-hint-expression {
                               extends=tall-expression
                           }
private wide-dotket-expression ::= '.^(' spec ' ' TERM ' ' PATH ')'
private wide-tiscol-expression ::= '=:('
                                   <<list-one-or-more { wing ' ' small-expression } ', '>>
                                   small-expression
                                   ')'
private wide-barbuc-expression ::= '|$(' (SKIN | {'[' <<list-one-or-more SKIN ' '>> ']' }) ' ' spec ')'
private wide-raw-hint-expression ::= ('~<' | '~>') '(' (TERM | { TERM '.' small-expression }) ' ' small-expression ')'

private meta wide-1-fixed-template ::= <<rune>> '(' <<input>> ')'
private meta wide-2-fixed-template ::= <<rune>> '(' <<input1>> ' ' <<input2>> ')'
private meta wide-3-fixed-template ::= <<rune>> '(' <<input1>> ' ' <<input2>> ' ' <<input3>> ')'
private meta wide-4-fixed-template ::= <<rune>> '(' <<input1>> ' ' <<input2>> ' ' <<input3>> ' ' <<input4>> ')'

// Irregular expressions
irregular-expression ::= irregular-rune | irregular-other

irregular-rune ::= irregular-dotlus |
                   irregular-dottis |
                   irregular-tisgal |
                   irregular-wutbar |
                   irregular-wutpam |
                   irregular-wutzap |
                   irregular-colhep |
                   irregular-colsig |
                   irregular-coltar |
                   irregular-cencol |
                   irregular-censig |
                   irregular-centis |
                   irregular-ketcol |
                   irregular-kethep |
                   irregular-kettar |
                   irregular-kettis |
                   irregular-buccab |
                   irregular-buccol |
                   irregular-bucwut |
                   irregular-miccol
irregular-dotlus ::= '+(' small-expression ')' {extends=irregular-rune}
irregular-dottis ::= '=(' small-expression ' ' small-expression ')' {extends=irregular-rune}
irregular-tisgal ::= (SKIN | wing) ':' small-expression
irregular-wutbar ::= '|(' <<list-one-or-more small-expression ' '>> ')' {extends=irregular-rune}
irregular-wutpam ::= '&(' <<list-one-or-more small-expression ' '>> ')' {extends=irregular-rune}
irregular-wutzap ::= '!' small-expression {extends=irregular-rune}
irregular-colhep ::= smaller-expression '^' small-expression
irregular-colsig ::= '~[' <<list-one-or-more small-expression ' '>> ']' {extends=irregular-rune}
irregular-coltar ::= '[' <<list-one-or-more small-expression ' '>> ']' {extends=irregular-rune}
irregular-cencol ::= '(' <<list-two-or-more small-expression ' '>> ')' {extends=irregular-rune}
irregular-censig ::= '~(' wing ' ' <<list-two-or-more small-expression ' '>> ')' {extends=irregular-rune}
irregular-centis ::= wing '(' <<list-one-or-more { wing ' ' small-expression } ', '>> ')' {extends=irregular-rune}
irregular-ketcol ::= ',' spec {extends=irregular-rune}
irregular-kethep ::= '`' spec '`' small-expression {extends=irregular-rune}
irregular-kettar ::= '*' spec {extends=irregular-rune}
irregular-kettis ::= spec '=' small-expression {extends=irregular-rune}
irregular-buccab ::= '_' small-expression {extends=irregular-rune}
irregular-buccol ::= '[' <<list-one-or-more spec ' '>> ']' {extends=irregular-rune}
irregular-bucwut ::= '?(' <<list-one-or-more spec ' '>> ')' {extends=irregular-rune}
irregular-miccol ::= ':(' <<list-two-or-more small-expression ' '>> ')' {extends=irregular-rune}

irregular-other ::= irregular-list |
                    irregular-cask |
                    irregular-unit
irregular-list ::= '[' <<list-one-or-more small-expression ' '>> ']~' {extends=irregular-other}
irregular-cask ::= SKIN ('+' | '/') small-expression {extends=irregular-other}
irregular-unit ::=  '`' small-expression {extends=irregular-other}

// SAIL expressions
sail-expression ::= tall-sail-expression | wide-sail-expression

sail-init ::= ';' SKIN

tall-sail-expression ::= sail-init (tall-sail-params-only | tall-sail-subexpressions)
private tall-sail-params-only ::= { gap tall-sail-param }+ ';'
private tall-sail-subexpressions ::= { gap tall-sail-param }* { gap sail-expression }+ tall-list-terminator
tall-sail-param ::= '=' SKIN gap TAPE

wide-sail-expression ::= ';' <<list-one-or-more wide-sail-subexpression ':'>> (wide-sail-text | ';')
wide-sail-subexpression ::= SKIN { sail-subexpression | wide-sail-params }?
sail-subexpression ::= sail-subexpression-dot | sail-subexpression-fas | sail-subexpression-hax | sail-subexpression-pat
sail-subexpression-dot ::= '.' SKIN
                           {
                               wide-sail-params |
                               sail-subexpression-dot |
                               sail-subexpression-fas |
                               sail-subexpression-pat
                           }?
                           {
                               extends=sail-subexpression
                           }
sail-subexpression-fas ::= '/' TAPE { wide-sail-params }? {extends=sail-subexpression}
sail-subexpression-hax ::= '#' SKIN
                           {
                               wide-sail-params |
                               sail-subexpression-dot |
                               sail-subexpression-fas |
                               sail-subexpression-pat
                           }?
                           {
                               extends=sail-subexpression
                           }
sail-subexpression-pat ::= '@' TAPE { wide-sail-params }? {extends=sail-subexpression}
wide-sail-params ::= '(' { <<list-one-or-more { SKIN ' ' TAPE } ', '>> }? ')'
wide-sail-text ::= ':' (CORD | TAPE)


// Rune groupings
private rune-1-fixed-h ::= '.+' | '.?' | '!:' | '!.' | '!>' | '!=' | '?!' | '|.' | '|-' | '|?' | '^|' | '^&' | '^~' |
                           '^?' | '$_' | ';+' | ';/' | ';*' | '~+'
private rune-1-fixed-s ::= '^:' | '^*'

private rune-2-fixed-hh ::= '.*' | '.=' | '=<' | '=>' | '=-' | '=+' | '?<' | '?>' | '|:' | ':_' | ':-' | '%.' | '%-' |
                            '^.' | '^+' | '~|' | '~_' | '~=' | '~!'
private rune-2-fixed-sh ::= '!<' | '=|' | '|~' | '|*' | '|=' | '^-' | '^=' | '$|' | '$&' | ';;'
private rune-2-fixed-ss ::= '$<' | '$>' | '$-' | '$^' | '$@'
private rune-2-fixed-th ::= '~$' | '~/'

private rune-3-fixed-hhh ::= '?:' | '?.' | ':+' | '%+' | '~?'
private rune-3-fixed-shh ::= '=;' | '=/'
private rune-3-fixed-whh ::= '=.' | '?^' | '?~' | '?@' | '%~'

private rune-4-fixed-hhhh ::= ':^' | '%^'

private rune-0-running-h ::= '?|' | '?&' | ':~' | ':*' | ';='
private rune-0-running-s ::= '$%' | '$:' | '$?'

private rune-1-running-hh ::= '=~' | '%:' | ';:' | ';~'

private rune-1-jogging-wwh ::= '%_' | '%='

private rune-0-core ::= '|%' | '|@'

// non-rune expressions
literal ::= '~' |
            LOOBEAN |
            UNSIGNED_DECIMAL |
            UNSIGNED_BINARY |
            UNSIGNED_HEXADECIMAL |
            UNSIGNED_B32 |
            UNSIGNED_B64 |
            SIGNED_DECIMAL |
            SIGNED_BINARY |
            SIGNED_HEXADECIMAL |
            SIGNED_B32 |
            SIGNED_B64 |
            FLOAT |
            DOUBLE |
            HALF |
            QUAD |
            TERM |
            KNOT |
            CORD |
            TAPE |
            SHIP |
            UNSCRAMBLED_SHIP |
            IPV4 |
            IPV6 |
            ABSOLUTE_DATE |
            RELATIVE_DATE |
            UNICODE_POINT |
            PATH

spec ::= '*' | '@' | '^' | AURA | TERM | SKIN | irregular-buccol | '(' SKIN { ' ' spec }+ ')' | { SKIN '=' spec }

wing ::= wing-fragment { '.' wing-fragment }*
private wing-fragment ::= '.' | ',' | { { '^' }* SKIN } | LARK | TREE_SLOT | LIST_SLOT

//
// Core & shared grammar
//

private gap ::= COMMENT | { ' ' COMMENT } | { GAP COMMENT* }

private meta list-one-or-more ::= <<rule>> { <<separator>> <<rule>> }*
private meta list-two-or-more ::= <<rule>> { <<separator>> <<rule>> }+
private meta gapped-list ::= <<list-one-or-more <<rule>> gap>>
